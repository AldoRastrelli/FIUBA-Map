function cuatriActual() {
    date = new Date()
    anio = date.getYear() + 1900
    mes = date.getMonth()
    if (mes <= 6) cuatri = 1
    else cuatri = 2
    return parseFloat(anio+'.'+cuatri)
}

function getPrev(cuatri) {
    cuatri = parseFloat(cuatri)
    let dec = (cuatri - Math.floor(cuatri)).toFixed(1)*10
    if (dec == 1)
        return parseFloat((cuatri - 0.9).toFixed(1))
    else
        return parseFloat((cuatri - 0.1).toFixed(1))
}

function getNext(cuatri) {
    cuatri = parseFloat(cuatri)
    let dec = (cuatri - Math.floor(cuatri)).toFixed(1)*10
    if (dec == 1) {
        return parseFloat((cuatri + 0.1).toFixed(1))
    }
    else
        return parseFloat((cuatri + 0.9).toFixed(1))
}

function resetBindings(FMap) {
    const self = FMap;
    $(document).on("keyup", function (event) {
        if (event.keyCode === 33) {
            $("#cuatri").val(function (i, oldval) {
                return getPrev(oldval)
            })
            self.cambiarCuatri()
        }
        if (event.keyCode ==34) {
            $("#cuatri").val(function (i, oldval) {
                return getNext(oldval)
            })
            self.cambiarCuatri()
        }
    })
    
    $('#cuatri').off('change').on('change', function () {
        $("#cuatri").val(function(i, oldval) {
            if (oldval <= self.cuatri)
                return getPrev(self.cuatri)                
            else 
                return getNext(self.cuatri)
        })
        self.cambiarCuatri()
    })

    $('.toggle').off('click').on('click', function () {
        let [, id] = $(this).attr('id').split('-');
        if (self.network.isCluster('cluster-' + id)) {
            self.network.openCluster('cluster-' + id);
            let color = self.network.groups.groups[id].color
            $(this).css("background-color", color);
        }
        else {
            self.network.cluster({
                joinCondition: function (nodeOptions) { return nodeOptions.categoria === id; },
                clusterNodeProperties: {id: 'cluster-' + id, hidden: true, level: 20, allowSingleNodeCluster: true}
            })
            $(this).css("background-color", "");
        }
        self.network.fit()
    });

    self.network.off('click').on("click", function (params) {
        if (!params.event.isFinal) return;
        let id = params.nodes[0];
        if (!id) return;
        if (!self.materias.get(id).aprobada) {
            self.aprobar(id, 0, self.cuatri)
        } else {
            self.desaprobar(id)
        }
        self.chequearNodosCRED()
    });

    self.network.off('hold').on("hold", function (params) {
        let id = params.nodes[0];
        if (id) mostrarOpciones(self.materias.get(id))
    });
}

function breakWords(string) {
    let broken = '';
    string.split(' ').forEach(element => {
        if (element.length < 5) broken += ' ' + element;
        else broken += '\n' + element;
    });
    return broken.trim();
}

function mostrarOpciones(materia) {
    const self = materia;
    let nota = self.nota ? self.nota : '';
    let html = `
    <div class="modal" style='display:block'>
        <div id='materia-modal-content' class="modal-content">
            <span onclick='$(this.parentElement.parentElement.parentElement).empty()' id="materiaclose-button" class="close-button">&times;</span>
            <h3>[` + self.id + `] ` + self.label + `</h3>
            <p>
                Nota:
                <input id='nota' class='materia-input' type="number" min="4" max="10" value="` + nota + `" />
            </p>
            <div id='materia-botones'>
                <button id='enfinal-button'>En Final</button>
                <button id='desaprobar-button'>Desaprobar</button>
                <button id='aprobar-button'>Aprobar</button>
            </div>
        </div>
    </div>
    `;
    $('#materia-modal').append($(html));

    $('#aprobar-button').on('click', function () {
        let nota = $('#nota').val();
        FIUBAMAP.aprobar(self.id, nota, FIUBAMAP.cuatri);
        $("#materiaclose-button").click()
    });

    $('#enfinal-button').on('click', function () {
        FIUBAMAP.aprobar(self.id, -1, FIUBAMAP.cuatri);
        $("#materiaclose-button").click()
    });

    $('#desaprobar-button').on('click', function () {
        FIUBAMAP.desaprobar(self.id);
        $("#materiaclose-button").click()
    })

    $('#materia-modal').on("keyup", function (event) {
        if (event.keyCode === 13) {
            event.preventDefault();
            let nota = $('#nota').val();
            FIUBAMAP.aprobar(self.id, nota, FIUBAMAP.cuatri);
            $("#materiaclose-button").click()
        }
    });
}

function materiasAprobadasConNota(aprobadasTotal, cuatriActual) {
    let aprobadas = new Map()
    let maxCuatri = -1
    aprobadasTotal.forEach((map, cuatri) => {
        if (cuatri > cuatriActual) return
        map.forEach((nota, materia) => {
            if (nota <= 0) return;
            if (aprobadas.has(materia)) {
                if (cuatri > maxCuatri) {
                    aprobadas.set(materia, nota)
                    maxCuatri = cuatri
                }
            }
            else
                aprobadas.set(materia, nota)
        })
    })
    return aprobadas
}

function materiasAprobadas(aprobadasTotal, cuatriActual) {
    let aprobadas = []
    aprobadasTotal.forEach((map, cuatri) => {
        if (cuatri > cuatriActual) return
        map.forEach((nota, materia) => {
            if (nota == -1) return;
            if (aprobadas.includes(materia)) return;
            aprobadas.push(materia)
        })
    })
    return aprobadas
}

function crearNetwork(nodes, edges) {
    let data = {nodes: nodes, edges: edges};
    let options = {
        nodes: {shape: 'box'},
        layout: {hierarchical: {enabled: true, direction: 'LR', levelSeparation: 150}},
        edges: {arrows: {to: {enabled: true, scaleFactor: 0.7, type: 'arrow'}}},
        groups: {
            'Aprobadas': {color: '#7BE141'},
            'En Final': {color: '#4ae9c1'},
            'Habilitadas': {color: '#ffa500'},
            'Materias Electivas': {color: '#FA8072'},
            'Materias Obligatorias': {color: '#ADD8E6'},
            // Informática
            'Orientación: Gestión Industrial de Sistemas': {color: '#FFFF00'},
            'Orientación: Sistemas Distribuidos': {color: '#7FFFD4'},
            'Orientación: Sistemas de Producción': {color: '#6495ED'},
            // Mecánica
            'Orientación: Diseño Mecánico': {color: '#FFFF00'},
            'Orientación: Termomecánica': {color: '#7FFFD4'},
            'Orientación: Metalúrgica': {color: '#6495ED'},
            'Orientación: Computación Aplicada': {color: '#FFFFE0'},
            'Orientación: Industrias': {color: '#CCCCB3'},
            // Electrónica
            'Orientación: Multiples Orientaciones': {color: '#FFFF00'},
            'Orientación: Procesamiento de Señales': {color: '#7FFFD4'},
            'Orientación: Automatización y Control': {color: '#6495ED'},
            'Orientación: Física Electrónica': {color: '#FFFFE0'},
            'Orientación: Telecomunicaciones': {color: '#CCCCB3'},
            'Orientación: Sistemas Digitales y Computación': {color: '#FFE4E1'},
            'Orientación: Multimedia': {color: '#FFDAB9'},
            'Orientación: Instrumentación Biomédica': {color: '#66CDAA'},
        },
    };

    return new vis.Network($('#grafo')[0], data, options);
}let FORMAPI = 'https://docs.google.com/forms/u/0/d/1xUf-9SWdGf0jv_weLRe4tlXb-GWHkH-kc-v_S8kKGCI';
let SHEETAPI = "https://spreadsheets.google.com/feeds/list/1B7ytzx_-XvmaMApIb1UX3DXBCSCAAelXs_TuJ0Ww2fE/default/public/values?alt=json";

function save(clave, carrera, materias) {
    let form = $("<form id='formRecord' type='hidden' action=" + FORMAPI + " onsubmit='return window.submitGoogleForm(this)'></form>");
    form.append("<input name='entry.774465991' value=" + clave + ">");
    form.append("<input name='entry.992084860' value=" + carrera + ">");
    form.append("<input name='entry.2026137499' value=" + materias + ">");
    form.submit()
}

function loadMap(api, clave) {
    $("#clave").val(clave);
    let data = api.feed.entry;
    let usuario = null;
    data.forEach(fila => {
        if (fila.gsx$clave.$t == clave) usuario = fila
    });
    if (!usuario) {
        warning(clave);
        $("#sistemas").click()
        return
    }
    let carrera = usuario.gsx$carrera.$t;
    let materias = usuario.gsx$materias.$t;
    let materiasAprobadas = materias
    main(carrera)
    cargarMaterias(materiasAprobadas)
}

function warning(clave) {
    let html = `
        <small><div class="alert">
            <span class="close-button" onclick="this.parentElement.style.display='none';">&times;</span> 
            <p><strong>Padrón no registrado!</strong> Seleccioná tu carrera, marca las materias que aprobaste y toca el boton de guardar.</p>
            <p>Una vez guardado, podés entrar a <a href=https://fdelmazo.github.io/FIUBA-Map/?clave=` + clave + `>https://fdelmazo.github.io/FIUBA-Map/?clave=` + clave + `</a> y ver tu progreso.</p>
        </div></small>
    `;
    $('#warning').append($(html));
}

$(document).ready(function () {
    $('#dbsave-button').on('click', function () {
        let clave = $("#clave").val();
        if (!clave)
            return;
        let carrera = FIUBAMAP.carrera;
        let materias = mapToJson(FIUBAMAP.aprobadas)
        save(clave, carrera, materias);
        setTimeout(function () {
            window.location = "https://fdelmazo.github.io/FIUBA-Map?clave=" + clave;
        }, 1000)
    });

    $('#dbload-button').on('click', function () {
        let clave = $("#clave").val();
        if (!clave) return;
        window.location = "https://fdelmazo.github.io/FIUBA-Map?clave=" + clave;
    });

    $('#clave').on("keyup", function (event) {
        if (event.keyCode === 13) {
            event.preventDefault();
            $("#dbload-button").click();
        }
    });
});

function cargarMaterias(materias) {
    let map = objToMap(materias)
    FIUBAMAP.aprobadas = map
    FIUBAMAP.cambiarCuatri()
}

function mapToJson(map){
    let obj = {}
    map.forEach((map,cuatri) => {
        obj[cuatri] = Object.fromEntries(map)
    })
    return JSON.stringify(obj)        
}

function objToMap(obj){
    let json = JSON.parse(obj)
    let map = new Map()
    Object.keys(json).forEach(cuatri => {
        let submap = new Map()
        Object.keys(json[cuatri]).forEach(id => {
            submap.set(id, parseInt(json[cuatri][id]))
        })
        map.set(parseFloat(cuatri), submap)
    })
    return map
}FIUBAMAP = null;

class FiubaMap {
    constructor(data, carrera) {
        FIUBAMAP = this
        this.init(data);
        this.carrera = carrera;
        this.creditos = 0;
        this.cuatri = cuatriActual()
        $("#cuatri").val(this.cuatri)
        this.aprobadas = new Map();
        resetBindings(this)
    }

    aprobar(id, nota, cuatri) {
        let mat = this.materias.get(id)
        mat.aprobar(nota)
        this.agregarMateria(mat, cuatri)
        this.actualizar()
    }

    desaprobar(id, cambioCuatri) {
        let mat = this.materias.get(id)
        if (!cambioCuatri)
            this.removerMateria(mat)
        mat.desaprobar()
        this.actualizar()
    }
    
    cambiarCuatri() {
        const self = this
        self.cuatri = $("#cuatri").val()
        self.aprobadas.forEach((map,cuatri) => {
            if (cuatri > this.cuatri)
                map.forEach((v,k) => {self.desaprobar(k, true)})
            else
                map.forEach((v,k) => {self.aprobar(k,v, cuatri)})
        })
        this.actualizar()
    }

    actualizar() {
        this.actualizarPromedio();
        this.actualizarCreditos();
    }
    
    actualizarPromedio() {
        const self = this
        let sumatoria = 0
        let cantidad = 0
        let materias = materiasAprobadasConNota(self.aprobadas, self.cuatri)
        materias.forEach((nota, materia) => {
            sumatoria += nota
            cantidad++
        })
        let promedio = (sumatoria / cantidad).toFixed(2);
        if (!isNaN(promedio)) $('#promedio-var').text(promedio);
        else $('#promedio-var').text('-');
    }

    actualizarCreditos() {
        const self = this
        let cred = 0
        let materias = materiasAprobadas(self.aprobadas, self.cuatri)
        materias.forEach((id) => {
            cred += this.materias.get(id).creditos
        })

        $('#creditos-var').text(cred)
        self.creditos = cred
    }

    chequearNodosCRED() {
        this.materias_cred.forEach(nodo => {
            if (this.creditos < nodo.requiere) nodo.deshabilitar();
            else if (this.creditos >= nodo.requiere) nodo.habilitar();
        })
    };
    
    agregarMateria(mat, cuatri) {
        let aprobadasEnCuatri = this.aprobadas.get(cuatri)
        if (!aprobadasEnCuatri)
            aprobadasEnCuatri = new Map()
        aprobadasEnCuatri.set(mat.id, mat.nota)
        this.aprobadas.set(cuatri, aprobadasEnCuatri)
    }

    removerMateria(mat) {
        let aprobadasEnCuatri = this.aprobadas.get(this.cuatri)
        if (!aprobadasEnCuatri) return;
        aprobadasEnCuatri.delete(mat.id)
        if (!aprobadasEnCuatri.size)
            this.aprobadas.delete(this.cuatri)
        else
            this.aprobadas.set(this.cuatri, aprobadasEnCuatri)
    }

    init(data) {
        let nodos = [];
        let materias = new Map();
        let aristas = [];
        let grupos = [];
        let materiasCred = [];
        let filas = data.split(/\r?\n|\r/);
        for (let fila = 1; fila < filas.length; fila++) {
            let [codigo, titulo, creditos, correlativas, categoria, nivel] = filas[fila].split(',');;
            let materia = new Materia(codigo, titulo, creditos, categoria, nivel);
            correlativas.split('-').forEach(c => {
                if (c.includes('CRED')) {
                    // Una materia CRED requiere n creditos para aprobar (ej: legislatura necesita 140 creditos)
                    let [, n] = c.split('CRED');
                    materia.requiere = n;
                    materiasCred.push(materia)
                }
                let arista = {from: c, to: materia.id};
                // Las aristas entre CBC y los nodos CRED sirven para que el layout quede bien
                // Pero no deben ser mostradas
                if (c == 'CBC' && materia.requiere) arista.hidden = true;
                aristas.push(arista)
            });
            nodos.push(materia);
            materias.set(codigo, materia);
            if (!grupos.includes(materia.categoria)) grupos.push(materia.categoria);
        }
        this.materias = materias
        this.materias_cred = materiasCred
        this.nodos = new vis.DataSet(nodos)
        this.network = crearNetwork(this.nodos, new vis.DataSet(aristas));
        
        grupos.forEach(g => {
            if (g.includes('Electivas') || g.includes('Orientación')) {
                let cluster = {
                    joinCondition: function (nodeOptions) {
                        return nodeOptions.categoria === g;
                    },
                    clusterNodeProperties: {id: 'cluster-' + g, hidden: true, level: 20, allowSingleNodeCluster: true}
                }
                this.network.cluster(cluster);
                if (g.includes('Orientación')) {
                    let [, orientacion] = g.split(':');
                    $("#orientaciones").append("<a class='toggle' id='toggle-" + g + "'>" + orientacion + "</a>");
                }
            }
        })
    }
}!function (exports) {
    exports.submitGoogleForm = submitGoogleForm;

    function submitGoogleForm(form) {
        try {
            const data = [].slice.call(form).map(function (control) {
                return 'value' in control && control.name ?
                    control.name + '=' + (control.value === undefined ? '' : control.value) :
                    '';
            }).join('&');
            const xhr = new XMLHttpRequest();

            xhr.open('POST', form.action + '/formResponse', true);
            xhr.setRequestHeader('Accept',
                'application/xml, text/xml, */*; q=0.01');
            xhr.setRequestHeader('Content-type',
                'application/x-www-form-urlencoded; charset=UTF-8');
            xhr.send(data);
        } catch (e) {
        }

        form.parentNode.className += ' submitted';

        return false;
    }
}(typeof module === 'undefined' ? window : module.exports);
function main(carrera) {
    $('.dropdown-content').hide();
    $("#grafo").html("<div class='loader'></div>");
    let filename, titulo, tituloShort, orientaciones, plan;
    switch (carrera) {
        case 'informatica':
            orientaciones = true;
            filename = 'data/informatica-1986.csv';
            plan = 'Plan 1986 v2016';
            titulo = 'Ingeniería en Informática';
            tituloShort = 'Informática';
            break;
        case 'sistemas':
            orientaciones = false;
            filename = 'data/sistemas-1986.csv';
            plan = 'Plan 1986 v2016';
            titulo = 'Licenciatura en Análisis de Sistemas';
            tituloShort = 'Sistemas';
            break;
        case 'electronica':
            orientaciones = true;
            filename = 'data/electronica-2009.csv';
            plan = 'Plan 2009 v2019';
            titulo = 'Ingeniería Electrónica';
            tituloShort = 'Electrónica';
            break;
        case 'quimica':
            orientaciones = false;
            filename = 'data/quimica-1986.csv';
            plan = 'Plan 1986 v2016';
            titulo = 'Ingeniería Química';
            tituloShort = 'Química';
            break;
        case 'civil':
            orientaciones = false;
            filename = 'data/civil-2009.csv';
            plan = 'Plan 2009 v2016';
            titulo = 'Ingeniería Civil';
            tituloShort = 'Civil';
            break;
        case 'alimentos':
            orientaciones = false;
            filename = 'data/alimentos-2000.csv';
            plan = 'Plan 2000 v2016';
            titulo = 'Ingeniería de Alimentos';
            tituloShort = 'Alimentos';
            break;
        case 'electricista':
            orientaciones = false;
            filename = 'data/electricista-2009.csv';
            plan = 'Plan 2009 v2016';
            titulo = 'Ingeniería Electricista';
            tituloShort = 'Electricista';
            break;
        case 'naval':
            orientaciones = false;
            filename = 'data/naval-1986.csv';
            plan = 'Plan 1986 v2016';
            titulo = 'Ingeniería Naval y Mecánica';
            tituloShort = 'Naval';
            break;
        case 'mecanica':
            orientaciones = true;
            filename = 'data/mecanica-1986.csv';
            plan = 'Plan 1986 v2016';
            titulo = 'Ingeniería Mecánica';
            tituloShort = 'Mecánica';
            break;
        case 'petroleo':
            orientaciones = false;
            filename = 'data/petroleo-2015.csv';
            plan = 'Plan 2015 v2016';
            titulo = 'Ingeniería en Petróleo';
            tituloShort = 'Petróleo';
            break;
        case 'agrimensura':
            orientaciones = false;
            filename = 'data/agrimensura-2006.csv';
            plan = 'Plan 2006 v2016';
            titulo = 'Ingeniería en Argimensura';
            tituloShort = 'Agrimensura';
            break;
        case 'industrial':
            orientaciones = false;
            filename = 'data/industrial-2011.csv';
            plan = 'Plan 2011 v2019';
            titulo = 'Ingeniería Industrial';
            tituloShort = 'Industrial';
            break
    }

    $("#carrera-actual-long").text(titulo + ' | ' + plan);
    $("#carrera-actual-short").text(tituloShort);
    $("#carreras .active").removeClass('active');
    $("#" + carrera).addClass('active');
    $("#orientaciones a").remove();
    $('#creditos-var').text(0);
    $('#promedio-var').text('-');
    if (orientaciones) $("#orientaciones-hidden").show();
    else $("#orientaciones-hidden").hide();

    $.ajax({
        url: filename,
        dataType: 'text',
        success: function (data) {
            new FiubaMap(data, carrera)
        },
        async: false
    })
}

$(document).ready(function () {
    $(".dropdown").on("mouseover", function () {
        $(this).children('.dropdown-content').show()
    });

    $(".dropdown").on("mouseout", function () {
        $(this).children('.dropdown-content').hide()
    });

    $('.carrera').on('click', function () {
        main($(this).attr('id'))
        FIUBAMAP.aprobar("CBC", 0, FIUBAMAP.cuatri)
    });

    $(document).keydown(function (event) {
        if (event.keyCode == 27)
            $('.close-button').click();
    });
});

$(document).ready(function () {
    let url = new URL(window.location.href);
    let clave = url.searchParams.get('clave')
    if (clave)
        $.ajax({
            url: SHEETAPI,
            method: 'GET',
            success: function (data) {
                loadMap(data, clave)
            }
        })
    else
        $("#sistemas").click()
});class Materia {
    constructor(codigo, titulo, creditos, categoria, nivel) {
        this.id = codigo;
        this.label = breakWords(titulo);
        this.creditos = parseInt(creditos);
        this.group = categoria;
        this.level = nivel;
        this.categoria = categoria;
        this.aprobada = false;
        this.nota = 0;
        this.habilitada = false;
    }

    aprobar(nota){
        this.aprobada = true;
        if (nota) {
            this.nota = parseInt(nota)
            if (this.label.includes('['))
                this.label = this.label.split('\n[')[0];
            if (nota == -1) {
                this.actualizar();
                return
            }
            this.label += '\n[' + this.nota + ']';
        } 
        let materiasQueYoHabilito = FIUBAMAP.network.getConnectedNodes(this.id, 'to');
        materiasQueYoHabilito.forEach(m => {
            let x = FIUBAMAP.materias.get(m);
            if (x) x.habilitar()
        })
        this.actualizar();
    }

    habilitar() {
        let materiasQueMeHabilitan = FIUBAMAP.network.getConnectedNodes(this.id, 'from');
        let todoAprobado = true;
        for (let i = 0; i < materiasQueMeHabilitan.length; i++) {
            let correlativa = FIUBAMAP.materias.get(materiasQueMeHabilitan[i]);
            if (!correlativa) continue;
            todoAprobado &= correlativa.aprobada
        }
        if (!todoAprobado || FIUBAMAP.creditos < this.requiere) return;
        this.habilitada = true;
        this.actualizar()
    }

    desaprobar() {
        this.aprobada = false;
        this.nota = 0;
        if (this.label.includes('['))
            this.label = this.label.split('\n[')[0];
        let materiasQueHabilita = FIUBAMAP.network.getConnectedNodes(this.id, 'to');
        materiasQueHabilita.forEach(m => {
            let x = FIUBAMAP.materias.get(m);
            if (x) x.deshabilitar()
        });
        this.actualizar()
    }

    deshabilitar() {
        this.habilitada = false;
        this.actualizar()
    }

    actualizar() {
        let grupoDefault = this.categoria;
        if (this.aprobada && this.nota >=0) grupoDefault = 'Aprobadas';
        else if (this.aprobada) grupoDefault = 'En Final';
        else if (this.habilitada) grupoDefault = 'Habilitadas';
        this.group = grupoDefault;
        FIUBAMAP.nodos.update(this)
        FIUBAMAP.actualizar()
    }
}
